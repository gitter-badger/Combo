// Generated by Apple Swift version 1.2 (swiftlang-602.0.53.1 clang-602.0.53)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
#if __has_feature(nullability)
#  define SWIFT_NULLABILITY(X) X
#else
# if !defined(__nonnull)
#  define __nonnull
# endif
# if !defined(__nullable)
#  define __nullable
# endif
# if !defined(__null_unspecified)
#  define __null_unspecified
# endif
#  define SWIFT_NULLABILITY(X)
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import WebKit;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class XWVScriptObject;

@interface NSObject (SWIFT_EXTENSION(XWebView))
@property (nonatomic, readonly) XWVScriptObject * __nullable scriptObject;
@end

@class WKUserScript;

@interface WKUserContentController (SWIFT_EXTENSION(XWebView))
- (void)removeUserScript:(WKUserScript * __nonnull)script;
@end

@class NSURL;
@class WKNavigation;

@interface WKWebView (SWIFT_EXTENSION(XWebView))
- (WKNavigation * __nullable)loadFileURL:(NSURL * __nonnull)URL allowingReadAccessToURL:(NSURL * __nonnull)readAccessURL;
@end


@interface WKWebView (SWIFT_EXTENSION(XWebView))
- (id __nullable)evaluateJavaScript:(NSString * __nonnull)script error:(NSError * __nullable * __null_unspecified)error;
@end

@class NSThread;

@interface WKWebView (SWIFT_EXTENSION(XWebView))
@property (nonatomic) NSThread * __nonnull pluginThread;
- (XWVScriptObject * __nullable)loadPlugin:(NSObject * __nonnull)object namespace:(NSString * __nonnull)namespace;
@end

@class WKScriptMessage;

SWIFT_CLASS("_TtC8XWebView10XWVChannel")
@interface XWVChannel : NSObject <WKScriptMessageHandler>
@property (nonatomic, readonly, copy) NSString * __nonnull id;
@property (nonatomic, readonly) NSThread * __nonnull thread;
@property (nonatomic, readonly, weak) WKWebView * __nullable webView;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithChannelID:(NSString * __nullable)channelID webView:(WKWebView * __nonnull)webView thread:(NSThread * __nullable)thread OBJC_DESIGNATED_INITIALIZER;
- (XWVScriptObject * __nullable)bindPlugin:(NSObject * __nonnull)object toNamespace:(NSString * __nonnull)namespace;
- (void)unbind;
- (void)userContentController:(WKUserContentController * __nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * __nonnull)message;
@end

@class NSBundle;

SWIFT_CLASS("_TtC8XWebView12XWVInventory")
@interface XWVInventory
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithDirectory:(NSString * __nonnull)directory OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithBundle:(NSBundle * __nonnull)bundle OBJC_DESIGNATED_INITIALIZER;
- (BOOL)scanPluginInDirectory:(NSString * __nonnull)directory;
- (BOOL)scanPluginInBundle:(NSBundle * __nonnull)bundle;
- (BOOL)registerPlugin:(Class __nonnull)plugin namespace:(NSString * __nonnull)namespace;
- (Class __nullable)pluginForNamespace:(NSString * __nonnull)namespace;
@end


SWIFT_PROTOCOL("_TtP8XWebView12XWVScripting_")
@protocol XWVScripting
@optional
- (NSString * __nonnull)javascriptStub:(NSString * __nonnull)stub;
- (void)finalizeForScript;
+ (BOOL)isSelectorForConstructor:(SEL __null_unspecified)selector;
+ (BOOL)isSelectorForDefaultMethod:(SEL __null_unspecified)selector;
+ (NSString * __nonnull)scriptNameForKey:(int8_t const * __null_unspecified)name;
+ (NSString * __nonnull)scriptNameForSelector:(SEL __null_unspecified)selector;
+ (BOOL)isSelectorExcludedFromScript:(SEL __null_unspecified)selector;
+ (BOOL)isKeyExcludedFromScript:(int8_t const * __null_unspecified)name;
@end


SWIFT_CLASS("_TtC8XWebView9XWVLoader")
@interface XWVLoader : NSObject <XWVScripting>
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithInventory:(XWVInventory * __nonnull)inventory OBJC_DESIGNATED_INITIALIZER;
+ (BOOL)isSelectorForDefaultMethod:(SEL __null_unspecified)selector;
+ (BOOL)isSelectorExcludedFromScript:(SEL __null_unspecified)selector;
@end


SWIFT_CLASS("_TtC8XWebView9XWVObject")
@interface XWVObject : NSObject
@property (nonatomic, readonly, copy) NSString * __nonnull namespace;
@property (nonatomic, readonly, assign) XWVChannel * __nonnull channel;
@property (nonatomic, readonly) WKWebView * __nullable webView;
@end


SWIFT_CLASS("_TtC8XWebView15XWVScriptObject")
@interface XWVScriptObject : XWVObject
- (id __nullable)evaluateExpression:(NSString * __nonnull)exp error:(NSError * __nullable * __null_unspecified)error;
- (void)evaluateExpression:(NSString * __nonnull)exp onSuccess:(void (^ __nullable)(id __null_unspecified))handler;
- (void)constructWithArguments:(NSArray * __nullable)arguments resultHandler:(void (^ __nullable)(id __null_unspecified))resultHandler;
- (void)callWithArguments:(NSArray * __nullable)arguments resultHandler:(void (^ __nullable)(id __null_unspecified))resultHandler;
- (void)callMethod:(NSString * __nonnull)name withArguments:(NSArray * __nullable)arguments resultHandler:(void (^ __nullable)(id __null_unspecified))resultHandler;
- (id __null_unspecified)constructWithArguments:(NSArray * __nullable)arguments;
- (id __null_unspecified)callWithArguments:(NSArray * __nullable)arguments;
- (id __null_unspecified)callMethod:(NSString * __nonnull)name withArguments:(NSArray * __nullable)arguments;
- (id __nullable)defineProperty:(NSString * __nonnull)name descriptor:(NSDictionary * __nonnull)descriptor;
- (BOOL)deleteProperty:(NSString * __nonnull)name;
- (BOOL)hasProperty:(NSString * __nonnull)name;
- (id __nullable)valueForProperty:(NSString * __nonnull)name;
- (void)setValue:(id __nullable)value forProperty:(NSString * __nonnull)name;
- (id __nullable)valueAtIndex:(NSUInteger)index;
- (void)setValue:(id __nullable)value atIndex:(NSUInteger)index;
@end


@interface XWVScriptObject (SWIFT_EXTENSION(XWebView))
@property (nonatomic, readonly) XWVScriptObject * __nonnull windowObject;
@property (nonatomic, readonly) XWVScriptObject * __nonnull documentObject;
@end


@interface XWVScriptObject (SWIFT_EXTENSION(XWebView))
- (id __nullable)objectForKeyedSubscript:(NSString * __nonnull)name;
- (void)setObject:(id __nullable)newValue forKeyedSubscript:(NSString * __nonnull)name;
- (id __nullable)objectAtIndexedSubscript:(NSUInteger)index;
- (void)setObject:(id __nullable)newValue atIndexedSubscript:(NSUInteger)index;
@end


#pragma clang diagnostic pop
